"use strict";(()=>{var e={};e.id=9939,e.ids=[9939],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8824:(e,t,o)=>{o.r(t),o.d(t,{originalPathname:()=>g,patchFetch:()=>x,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>d,staticGenerationAsyncStorage:()=>u});var r={};o.r(r),o.d(r,{GET:()=>p});var n=o(49303),s=o(88716),a=o(60670),i=o(20021);async function p(){if(i.Xd?.config?.apiKey?.toLowerCase()!=="openai")return Response.json("Oops! The selected model has a potential configuration conflict. Please ensure that all your open instances of VSCode have the same provider.",{status:400});let e=i.Xd?.globalState?.config;return Response.json(e,{status:200})}let c=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/[port]/api/(providers)/openai/config/route",pathname:"/[port]/api/openai/config",filename:"route",bundlePath:"app/[port]/api/(providers)/openai/config/route"},resolvedPagePath:"/Users/maol/WebstormProjects/Trabajo/codegpt-nextjs/app/[port]/api/(providers)/openai/config/route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:l,staticGenerationAsyncStorage:u,serverHooks:d}=c,g="/[port]/api/(providers)/openai/config/route";function x(){return(0,a.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:u})}},20021:(e,t,o)=>{o.d(t,{Xd:()=>n,ed:()=>s,vx:()=>r});let r=()=>{let{headers:e}=o(71615),t=e().get("referer").split("/")[3];return console.log({extensionUrl:`http://localhost:${t}`}),`http://localhost:${t}`},n={},s=e=>{n=e}}};var t=require("../../../../../../webpack-runtime.js");t.C(e);var o=e=>t(t.s=e),r=t.X(0,[9276,1203],()=>o(8824));module.exports=r})();