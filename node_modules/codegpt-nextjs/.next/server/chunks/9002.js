"use strict";exports.id=9002,exports.ids=[9002],exports.modules={9002:(e,r,i)=>{i.r(r),i.d(r,{fromProcess:()=>a});var t=i(39435),s=i(97110),o=i(32081),n=i(73837);let c=(e,r)=>{if(1!==r.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===r.AccessKeyId||void 0===r.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(r.Expiration){let i=new Date;if(new Date(r.Expiration)<i)throw Error(`Profile ${e} credential_process returned expired credentials.`)}return{accessKeyId:r.AccessKeyId,secretAccessKey:r.SecretAccessKey,...r.SessionToken&&{sessionToken:r.SessionToken},...r.Expiration&&{expiration:new Date(r.Expiration)},...r.CredentialScope&&{credentialScope:r.CredentialScope}}},d=async(e,r)=>{let i=r[e];if(r[e]){let r=i.credential_process;if(void 0!==r){let i=(0,n.promisify)(o.exec);try{let t;let{stdout:s}=await i(r);try{t=JSON.parse(s.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return c(e,t)}catch(e){throw new s.mV(e.message)}}else throw new s.mV(`Profile ${e} did not contain credential_process.`)}else throw new s.mV(`Profile ${e} could not be found in shared credentials file.`)},a=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-process","fromProcess");let r=await (0,t.MX)(e);return d((0,t.Jl)(e),r)}}};