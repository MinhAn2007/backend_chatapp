"use strict";exports.id=9021,exports.ids=[9021],exports.modules={89021:(e,t,a)=>{a.r(t),a.d(t,{DEFAULT_MAX_RETRIES:()=>m,DEFAULT_TIMEOUT:()=>u,ENV_CMDS_AUTH_TOKEN:()=>E,ENV_CMDS_FULL_URI:()=>v,ENV_CMDS_RELATIVE_URI:()=>w,Endpoint:()=>n,fromContainerMetadata:()=>_,fromInstanceMetadata:()=>$,getInstanceMetadataEndpoint:()=>C,httpRequest:()=>l,providerConfigFromInit:()=>h});var n,r,o=a(97110),i=a(57310),s=a(14300),c=a(13685);function l(e){return new Promise((t,a)=>{let n=(0,c.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});n.on("error",e=>{a(Object.assign(new o.kb("Unable to connect to instance metadata service"),e)),n.destroy()}),n.on("timeout",()=>{a(new o.kb("TimeoutError from instance metadata service")),n.destroy()}),n.on("response",e=>{let{statusCode:r=400}=e;(r<200||300<=r)&&(a(Object.assign(new o.kb("Error response received from instance metadata service"),{statusCode:r})),n.destroy());let i=[];e.on("data",e=>{i.push(e)}),e.on("end",()=>{t(s.Buffer.concat(i)),n.destroy()})}),n.end()})}let d=e=>!!e&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,p=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),u=1e3,m=0,h=({maxRetries:e=m,timeout:t=u})=>({maxRetries:e,timeout:t}),f=(e,t)=>{let a=e();for(let n=0;n<t;n++)a=a.catch(e);return a},v="AWS_CONTAINER_CREDENTIALS_FULL_URI",w="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",E="AWS_CONTAINER_AUTHORIZATION_TOKEN",_=(e={})=>{let{timeout:t,maxRetries:a}=h(e);return()=>f(async()=>{let e=await g(),a=JSON.parse(await I(t,e));if(!d(a))throw new o.mV("Invalid response received from instance metadata service.");return p(a)},a)},I=async(e,t)=>(process.env[E]&&(t.headers={...t.headers,Authorization:process.env[E]}),(await l({...t,timeout:e})).toString()),A={localhost:!0,"127.0.0.1":!0},y={"http:":!0,"https:":!0},g=async()=>{if(process.env[w])return{hostname:"169.254.170.2",path:process.env[w]};if(process.env[v]){let e=(0,i.parse)(process.env[v]);if(!e.hostname||!(e.hostname in A))throw new o.mV(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in y))throw new o.mV(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new o.mV(`The container metadata credential provider cannot be used unless the ${w} or ${v} environment variable is set`,!1)};var S=a(1071);class T extends o.mV{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,T.prototype)}}var b=a(96636);!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(n||(n={}));let D={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(r||(r={}));let M={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:r.IPv4},C=async()=>(0,b.e)(await V()||await N()),V=async()=>(0,S.M)(D)(),N=async()=>{let e=await (0,S.M)(M)();switch(e){case r.IPv4:return n.IPv4;case r.IPv6:return n.IPv6;default:throw Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(r)}`)}},k=(e,t)=>{let a=new Date(Date.now()+1e3*(300+Math.floor(300*Math.random())));t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(a)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let n=e.originalExpiration??e.expiration;return{...e,...n?{originalExpiration:n}:{},expiration:a}},O=(e,t={})=>{let a;let n=t?.logger||console;return async()=>{let t;try{(t=await e()).expiration&&t.expiration.getTime()<Date.now()&&(t=k(t,n))}catch(e){if(a)n.warn("Credential renew failed: ",e),t=k(a,n);else throw e}return a=t,t}},x="/latest/meta-data/iam/security-credentials/",R="AWS_EC2_METADATA_V1_DISABLED",P="ec2_metadata_v1_disabled",U="x-aws-ec2-metadata-token",$=(e={})=>O(L(e),{logger:e.logger}),L=e=>{let t=!1,{logger:a,profile:n}=e,{timeout:r,maxRetries:i}=h(e),s=async(a,r)=>{if(t||r.headers?.[U]==null){let t=!1,a=!1,r=await (0,S.M)({environmentVariableSelector:e=>{let t=e[R];if(a=!!t&&"false"!==t,void 0===t)throw new o.mV(`${R} not set in env, checking config file next.`);return a},configFileSelector:e=>{let a=e[P];return t=!!a&&"false"!==a},default:!1},{profile:n})();if(e.ec2MetadataV1Disabled||r){let n=[];throw e.ec2MetadataV1Disabled&&n.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&n.push(`config file profile (${P})`),a&&n.push(`process environment variable (${R})`),new T(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${n.join(", ")}].`)}}let i=(await f(async()=>{let e;try{e=await F(r)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},a)).trim();return f(async()=>{let e;try{e=await W(i,r)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},a)};return async()=>{let e=await C();if(t)return a?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),s(i,{...e,timeout:r});{let n;try{n=(await K({...e,timeout:r})).toString()}catch(n){if(n?.statusCode===400)throw Object.assign(n,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===n.message||[403,404,405].includes(n.statusCode))&&(t=!0),a?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),s(i,{...e,timeout:r})}return s(i,{...e,headers:{[U]:n},timeout:r})}}},K=async e=>l({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),F=async e=>(await l({...e,path:x})).toString(),W=async(e,t)=>{let a=JSON.parse((await l({...t,path:x+e})).toString());if(!d(a))throw new o.mV("Invalid response received from instance metadata service.");return p(a)}}};