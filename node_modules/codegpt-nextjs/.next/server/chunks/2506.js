"use strict";exports.id=2506,exports.ids=[2506],exports.modules={52506:(e,s,t)=>{t.d(s,{fromSSO:()=>m});var o=t(97110),i=t(39435);let n=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),r="To refresh this SSO session run 'aws sso login' with the corresponding profile.",a={},l=async e=>{let{SSOOIDCClient:s}=await t.e(2393).then(t.bind(t,2393));if(a[e])return a[e];let o=new s({region:e});return a[e]=o,o},c=async(e,s)=>{let{CreateTokenCommand:o}=await t.e(2393).then(t.bind(t,2393));return(await l(s)).send(new o({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},w=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new o.rh(`Token is expired. ${r}`,!1)},f=(e,s,t=!1)=>{if(void 0===s)throw new o.rh(`Value not present for '${e}' in SSO Token${t?". Cannot refresh":""}. ${r}`,!1)},{writeFile:h}=t(57147).promises,d=(e,s)=>h((0,i.Py)(e),JSON.stringify(s,null,2)),g=new Date(0),u=(e={})=>async()=>{let s;e.logger?.debug("@aws-sdk/token-providers","fromSso");let t=await (0,i.MX)(e),n=(0,i.Jl)(e),a=t[n];if(a){if(!a.sso_session)throw new o.rh(`Profile '${n}' is missing required property 'sso_session'.`)}else throw new o.rh(`Profile '${n}' could not be found in shared credentials file.`,!1);let l=a.sso_session,h=(await (0,i.G)(e))[l];if(!h)throw new o.rh(`Sso session '${l}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!h[e])throw new o.rh(`Sso session '${l}' is missing required property '${e}'.`,!1);h.sso_start_url;let u=h.sso_region;try{s=await (0,i.gH)(l)}catch(e){throw new o.rh(`The SSO session token associated with profile=${n} was not found or is invalid. ${r}`,!1)}f("accessToken",s.accessToken),f("expiresAt",s.expiresAt);let{accessToken:p,expiresAt:S}=s,m={token:p,expiration:new Date(S)};if(m.expiration.getTime()-Date.now()>3e5)return m;if(Date.now()-g.getTime()<3e4)return w(m),m;f("clientId",s.clientId,!0),f("clientSecret",s.clientSecret,!0),f("refreshToken",s.refreshToken,!0);try{g.setTime(Date.now());let e=await c(s,u);f("accessToken",e.accessToken),f("expiresIn",e.expiresIn);let t=new Date(Date.now()+1e3*e.expiresIn);try{await d(l,{...s,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return w(m),m}},p=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:n,ssoRegion:r,ssoRoleName:a,ssoClient:l,clientConfig:c,profile:w})=>{let f,h;let d="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let e=await u({profile:w})();f={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new o.mV(e.message,!1)}else try{f=await (0,i.gH)(e)}catch(e){throw new o.mV(`The SSO session associated with this profile is invalid. ${d}`,!1)}if(new Date(f.expiresAt).getTime()-Date.now()<=0)throw new o.mV(`The SSO session associated with this profile has expired. ${d}`,!1);let{accessToken:g}=f,{SSOClient:p,GetRoleCredentialsCommand:S}=await t.e(9762).then(t.bind(t,79762)),m=l||new p(Object.assign({},c??{},{region:c?.region??r}));try{h=await m.send(new S({accountId:n,roleName:a,accessToken:g}))}catch(e){throw o.mV.from(e,!1)}let{roleCredentials:{accessKeyId:_,secretAccessKey:T,sessionToken:k,expiration:y,credentialScope:x}={}}=h;if(!_||!T||!k||!y)throw new o.mV("SSO returns an invalid temporary credential.",!1);return{accessKeyId:_,secretAccessKey:T,sessionToken:k,expiration:new Date(y),credentialScope:x}},S=e=>{let{sso_start_url:s,sso_account_id:t,sso_region:i,sso_role_name:n}=e;if(!s||!t||!i||!n)throw new o.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return e},m=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso","fromSSO");let{ssoStartUrl:s,ssoAccountId:t,ssoRegion:r,ssoRoleName:a,ssoSession:l}=e,{ssoClient:c}=e,w=(0,i.Jl)(e);if(s||t||r||a||l){if(s&&t&&r&&a)return p({ssoStartUrl:s,ssoSession:l,ssoAccountId:t,ssoRegion:r,ssoRoleName:a,ssoClient:c,clientConfig:e.clientConfig,profile:w});throw new o.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"')}{let t=(await (0,i.MX)(e))[w];if(!t)throw new o.mV(`Profile ${w} was not found.`);if(!n(t))throw new o.mV(`Profile ${w} is not configured with SSO credentials.`);if(t?.sso_session){let n=(await (0,i.G)(e))[t.sso_session],a=` configurations in profile ${w} and sso-session ${t.sso_session}`;if(r&&r!==n.sso_region)throw new o.mV("Conflicting SSO region"+a,!1);if(s&&s!==n.sso_start_url)throw new o.mV("Conflicting SSO start_url"+a,!1);t.sso_region=n.sso_region,t.sso_start_url=n.sso_start_url}let{sso_start_url:a,sso_account_id:l,sso_region:f,sso_role_name:h,sso_session:d}=S(t);return p({ssoStartUrl:a,ssoSession:d,ssoAccountId:l,ssoRegion:f,ssoRoleName:h,ssoClient:c,clientConfig:e.clientConfig,profile:w})}}}};